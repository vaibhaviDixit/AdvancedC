/*
Given a 2D matrix where each row is sorted in ascending order and the next row's first element is greater than the
previous row's last element, the task is to determine if a target element exists in the matrix.

Input: {1, 3, 5, 7, 9, 11, 13, 15, 17}
       target=9
Output: Element 9 found at position 4

*/

#include <stdio.h>
#include <stdlib.h>

// Binary search function to find the position of an element in an infinite sorted array
int binarySearchInfinite(int arr[], int target) {
    int low = 0, high = 1;

    while (arr[high] < target) {
        low= high;
        high = 2 * high;
    }

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == target) {
            return mid; // Element found
        } else if (arr[mid] < target) {
            low = mid + 1; // Search on the right side
        } else {
            high = mid - 1; // Search on the left side
        }
    }

    return -1; // Element not found
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 17}; // Example infinite sorted array
    int target = 9;

    int position = binarySearchInfinite(arr, target);

    if (position != -1) {
        printf("Element %d found at position %d\n", target, position);
    } else {
        printf("Element %d not found\n", target);
    }

    return 0;
}

/*
This program demonstrates binary search to find the position of a specific element in an infinite sorted array of integers.
Since the array is infinite, we cannot access elements beyond a certain point. Therefore, we use a two-step approach.
In the first step, we determine a high index that is guaranteed to be larger than the target element.
We start with low = 0 and high = 1, and we keep doubling the high index until arr[high] is greater than or equal to the target.
Once we have a valid search range, we perform binary search in the usual manner to find the target element.
The main function initializes the array and the target element, calls the binarySearchInfinite function,
and prints whether the element is found or not along with its position.
*/
