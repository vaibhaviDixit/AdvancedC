/*
Given a function rand50() that returns 0 or 1 with equal probability, write a function that returns 1 with 75% probability and 0 with
25% probability using rand50() only. Minimize the number of calls to the rand50() method. Also, the use of any other library function and
floating-point arithmetic are not allowed.


Output: 01011101111101111101111101111010110111011110000111


*/


// Program to print 1 with 75% probability and 0 with 25% probability
#include <bits/stdc++.h>
using namespace std;

// Random Function to that returns 0 or 1 with
// equal probability
int rand50()
{
	// rand() function will generate odd or even
	// number with equal probability. If rand() generates odd number, the function will
	// return 1 else it will return 0.
	return rand() & 1;
}

// Random Function to that returns 1 with 75% probability and 0 with 25% probability using Bitwise OR
bool rand75()
{
	return rand50() | rand50();
}

int main()
{
	// Initialize random number generator
	srand(time(NULL));

	for(int i = 0; i < 50; i++)
		cout << rand75();

	return 0;
}

/*

int rand50(): This is a function named rand50 that generates a random binary digit with an equal probability of 0 or 1. It uses the rand() function, which generates a random integer and then uses bitwise AND (&) with 1 to ensure that the result is either 0 or 1. This function returns the generated digit.

bool rand75(): This is a function named rand75 that generates a random binary digit with a 75% probability of being 1 and a 25% probability of being 0. It achieves this by calling the rand50() function twice and using the bitwise OR (|) operator between the results. This bitwise OR operation ensures that if either of the two calls to rand50() returns 1, the result of rand75() will be 1. This function returns the generated digit (true for 1, false for 0).

int main(): This is the main function where the program execution begins.

srand(time(NULL));: This line initializes the random number generator with the current time as a seed. This step ensures that the random numbers generated by the rand() function are different each time you run the program.

The program enters a loop that runs 50 times (for(int i = 0; i < 50; i++)). Inside the loop, it calls the rand75() function and prints the generated binary digit to the standard output using the cout stream.

*/
